/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package multiproject.resolver

import multiproject.lib.dto.request.RequestDirection
import multiproject.lib.dto.request.RequestDirectionInterpreter
import multiproject.lib.request.Request
import multiproject.lib.udp.SocketAddressInterpreter
import multiproject.lib.udp.UdpConfig
import multiproject.lib.udp.gateway.GatewayUdpChannel
import multiproject.lib.udp.gateway.runGateway
import multiproject.lib.udp.interfaces.OnReceive
import multiproject.resolver.resolvers.*
import multiproject.resolver.resolvers.client.ClientFirstRequestResolver
import multiproject.resolver.resolvers.client.ClientRequestResolver
import multiproject.resolver.resolvers.server.ServerFirstRequestResolver
import multiproject.resolver.resolvers.server.ServerRequestResolver
import org.koin.core.context.GlobalContext.startKoin
import org.koin.core.qualifier.named
import org.koin.dsl.module
import org.koin.java.KoinJavaComponent.inject
import java.net.InetSocketAddress

class App {
    init {
        val module = module {
            single<GatewayUdpChannel>(named("server")) {
                runGateway {
                    receiveCallback = OnReceive {
                        address, data -> run {
                            if (data.pathDto.controller == "")
                                return@run

                            val inetAddress = SocketAddressInterpreter.interpret(address)
                            val request = Request(data, inetAddress)

                        when (RequestDirectionInterpreter.interpret(request.requestDirection)) {
                                RequestDirection.FROM_CLIENT -> {
                                    request.acceptResolver(ClientRequestResolver())
                                }
                                RequestDirection.FROM_SERVER -> {
                                    request.acceptResolver(ServerRequestResolver())
                                }
                                else -> {
                                    request.acceptResolver(UnknownRequestResolver())
                                }
                            }
                        }
                    }
                    firstConnectCallback = OnReceive {
                        address, data -> run {

                            val inetAddress = SocketAddressInterpreter.interpret(address)
                            val request = Request(data, inetAddress)

                        when (RequestDirectionInterpreter.interpret(request.requestDirection)) {
                                RequestDirection.FROM_CLIENT -> {
                                    request.acceptResolver(ClientFirstRequestResolver())
                                }
                                RequestDirection.FROM_SERVER -> {
                                    request.acceptResolver(ServerFirstRequestResolver())
                                }
                                else -> {
                                    request.acceptResolver(UnknownRequestResolver())
                                }
                            }
                        }
                    }
                    bindOn(
                        address = InetSocketAddress(UdpConfig.serverAddress, UdpConfig.serverPort)
                    )
                }
            }
        }
        startKoin {
            modules(
                module
            )
        }
    }
}


fun main() {
    try {
        App()
        val server: GatewayUdpChannel by inject(GatewayUdpChannel::class.java, named("server"))
        server.run()
    } finally {
    }
}