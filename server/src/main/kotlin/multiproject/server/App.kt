/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package multiproject.server

import multiproject.lib.dto.Serializer
import multiproject.lib.udp.UdpConfig
import multiproject.server.collection.item.EntityBuilder
import multiproject.server.collection.Collection
import multiproject.server.command.CommandResolver
import multiproject.server.dump.DumpManager
import multiproject.server.dump.FileDumpManager
import multiproject.server.entities.flat.Flat
import multiproject.server.entities.flat.FlatBuilder
import multiproject.server.entities.flat.FlatCollection
import multiproject.lib.udp.server.ServerUdpChannel
import multiproject.lib.udp.server.runServer
import org.koin.core.context.GlobalContext.startKoin
import org.koin.core.qualifier.named
import org.koin.dsl.module
import org.koin.java.KoinJavaComponent.inject
import java.nio.ByteBuffer

class App (filePath: String) {
    init {
        val module = module {
            single<Collection<Flat>>(named("collection")) {
                FlatCollection(mutableListOf())
            }
            single<DumpManager<Flat>>(named("dumpManager")) {
                FileDumpManager(filePath, Flat.serializer())
            }
            single<EntityBuilder<Flat>>(named("builder")) {
                FlatBuilder()
            }
            single<ServerUdpChannel>(named("server")) {
                runServer {
                    onReceive {
                        channel, address, data -> run {
                            println()
                            print("Received request. From: "); print(address); print("; Message: "); print(data)
                            if (data.command == "")
                                return@run

                            CommandResolver.author = address
                            channel.send(
                                ByteBuffer.wrap(
                                    Serializer.serializeResponse(
                                        CommandResolver.run( data.command, data.data?.inlineArguments, data.data?.arguments )
                                    ).toByteArray()
                                ),
                                address
                            )
                        }
                    }
                    onFirstConnect {
                        channel, address -> run {
                            println("First connect of $address")
                            channel.send(ByteBuffer.wrap(Serializer.serializeResponse(CommandResolver.getCommandsInfo()).toByteArray()), address)
                        }
                    }
                    serverAddress(
                        serverAddress = UdpConfig.serverAddress,
                        serverPort = UdpConfig.serverPort
                    )
                }
            }
        }
        startKoin {
            modules(
                module
            )
        }
    }
}


fun main() {
    try {
        App("/Users/dudosyka/IdeaProjects/lab5Kotlin/data.csv")
        val server: ServerUdpChannel by inject(ServerUdpChannel::class.java, named("server"))
        server.run()
    } finally {
        CommandResolver.run("_dump", listOf(), mapOf())
    }
}